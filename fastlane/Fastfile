fastlane_version '2.207.0'
default_platform :ios

# we will call some node scripts which are written in ES6 (see below)
nodeExec = '../node_modules/.bin/babel-node'

# load in config generated in the pre-build step (see above)
file = File.read('../appConfig.json')
appConfig = JSON.parse(file)

def getVersionCode
  # Instead of managing the version code manually it is based on a timestamp in seconds
  # Any build done more recently is considered to be a higher version
  # versionCode increase every minute (so max 1 build per minute)
  # versionCode cannot be smaller than legacyVersionCode
  thirtySeptemberTwentyTwenty = 1601480940 / 60
  legacyVersionCode = 10902
  versionCode = legacyVersionCode + (Time.now.to_i / 60) - thirtySeptemberTwentyTwenty

  if versionCode > 2100000000
    raise "versionCode cannot be higher than 2100000000"
  end

  versionCode.floor()
end

# iOS
platform :ios do
  desc "Submit a new Build to Apple TestFlight"
  before_all do
    setup_circle_ci
  end
  lane :build do |options|
    # fetch previously generated certificates, but don't generate new ones if none already exist
    match(type: "appstore", readonly: true)
    # ensure we're on the right git branch
    ensure_git_branch(branch: options[:branch])
    # set the app build number from our previously generated config
    increment_build_number(
      xcodeproj: "./ios/Discipline.xcodeproj",
      build_number: appConfig["buildNumber"]
    )
    # set the app version from our previously generated config
    increment_version_number(
      xcodeproj: "./ios/Discipline.xcodeproj",
      version_number: appConfig["appVersion"]
    )
    # build the app for app store export
    gym(
      clean: true,
      xcargs: {
        :PROVISIONING_PROFILE_SPECIFIER => "match AppStore com.vivo.apps.discipline",
        :CODE_SIGN_IDENTITY => "iPhone Distribution"
      },
      export_method: 'app-store',
      export_options: {
        provisioningProfiles: { 
          "com.vivo.apps.discipline" => "match AppStore com.vivo.apps.discipline"
        }
      },
      workspace: "./ios/Discipline.xcworkspace",
      scheme: options[:schema],
      output_directory: "./build-tools/deploy/data"
    )
    # upload to TestFlight and notify testers
    if options[:testflight]
      testflight(
        skip_submission: true,
        skip_waiting_for_build_processing: true
      )
    end
  end

  lane :beta do
    build(branch: "master", schema: "Discipline-beta", testflight: true)
  end

  lane :pro do
    build(branch: "release", schema: "Discipline-pro", testflight: true)
  end
end

platform :android do   
  desc "Increments internal build number tracking (different than version)" 
  lane :bump_build_number do 
    android_set_version_code( 
      version_code: getVersionCode(),
      gradle_file: Dir.pwd + "/../android/app/build.gradle"
    )
  end
  desc "Build and uploads the app to playstore for a internal testing release"
  lane :playstoreInternal do |options|
    # Retrieve version of my app in package.json (React Native case)
    package = load_json(json_path: Dir.pwd + "/../package.json")

    # Clean build folder
    gradle(
      task: "clean",
      project_dir: Dir.pwd + "/../android"
    )

    # Bump android.defaultConfig.versionCode
    bump_build_number

    # Do the bundle of the application
    gradle(
      task: 'bundle',
      build_type: 'Release',
      properties: {
        "android.injected.signing.store.file" => Dir.pwd + "/release.keystore",
    "android.injected.signing.store.password" => options[:RELEASE_KEYSTORE_PASSWORD], # keystore password
        "android.injected.signing.key.alias" => options[:RELEASE_KEYSTORE_ALIAS], # alias
        "android.injected.signing.key.password" => options[:RELEASE_KEYSTORE_KEY_PASSWORD], # key password
        "vname" => package["version"]
      },
      project_dir: Dir.pwd + "/../android"
    )

    # Upload Android App Bundle to PlayStore like Internal testing Release
    upload_to_play_store(
      track: 'internal',
      release_status: 'draft', # <http://docs.fastlane.tools/actions/upload_to_play_store/#parameters>
      skip_upload_apk: true,
      version_name: package["version"]
    )
  end
 end 
 